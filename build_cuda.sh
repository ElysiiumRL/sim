#!/bin/bash\n\n# RocketSim CUDA Build Script\n# Automatically detects CUDA and builds optimized version\n\nset -e\n\necho \"RocketSim CUDA Build Script\"\necho \"===========================\"\n\n# Check if CUDA is available\nif ! command -v nvcc &> /dev/null; then\n    echo \"Error: CUDA Toolkit not found. Please install CUDA Toolkit 11.0 or later.\"\n    echo \"Download from: https://developer.nvidia.com/cuda-toolkit\"\n    exit 1\nfi\n\n# Check CUDA version\nCUDA_VERSION=$(nvcc --version | grep \"release\" | sed 's/.*release \\([0-9]*\\.[0-9]*\\).*/\\1/')\necho \"Found CUDA version: $CUDA_VERSION\"\n\n# Check for minimum CUDA version\nMIN_CUDA_VERSION=\"11.0\"\nif ! printf '%s\\n%s\\n' \"$MIN_CUDA_VERSION\" \"$CUDA_VERSION\" | sort -V -C; then\n    echo \"Warning: CUDA version $CUDA_VERSION is below recommended minimum $MIN_CUDA_VERSION\"\n    echo \"Some features may not work properly.\"\nfi\n\n# Check for NVIDIA GPU\nif command -v nvidia-smi &> /dev/null; then\n    echo \"GPU Information:\"\n    nvidia-smi --query-gpu=name,memory.total,compute_cap --format=csv,noheader\nelse\n    echo \"Warning: nvidia-smi not found. Cannot verify GPU availability.\"\nfi\n\n# Create build directory\nBUILD_DIR=\"build\"\nif [ -d \"$BUILD_DIR\" ]; then\n    echo \"Removing existing build directory...\"\n    rm -rf \"$BUILD_DIR\"\nfi\n\nmkdir \"$BUILD_DIR\"\ncd \"$BUILD_DIR\"\n\necho \"Configuring CMake...\"\n\n# Detect compute capability automatically\nCOMPUTE_CAP=\"\"\nif command -v nvidia-smi &> /dev/null; then\n    # Try to detect compute capability\n    COMPUTE_CAP=$(nvidia-smi --query-gpu=compute_cap --format=csv,noheader,nounits | head -1 | tr -d '.')\n    if [ ! -z \"$COMPUTE_CAP\" ]; then\n        echo \"Detected compute capability: $COMPUTE_CAP\"\n    fi\nfi\n\n# Configure CMake with optimizations\ncmake .. \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_CUDA_ARCHITECTURES=\"70;75;80;86;89\" \\\n    -DCMAKE_CXX_FLAGS=\"-O3 -march=native -mtune=native\" \\\n    -DCMAKE_CUDA_FLAGS=\"-O3 -use_fast_math -Xptxas -O3\" \\\n    -DCUDA_SEPARABLE_COMPILATION=ON\n\necho \"Building RocketSim CUDA...\"\n\n# Build with all available cores\nNUM_CORES=$(nproc 2>/dev/null || echo 4)\necho \"Building with $NUM_CORES parallel jobs...\"\n\nmake -j$NUM_CORES\n\necho \"Build completed successfully!\"\necho \"\"\necho \"Executables built:\"\nls -la RocketSim-CUDA-Example 2>/dev/null || echo \"  (Example executable not found)\"\n\necho \"\"\necho \"To run the benchmark:\"\necho \"  cd build && ./RocketSim-CUDA-Example\"\necho \"\"\necho \"To use in your project:\"\necho \"  #include \\\"../src/RocketSimCuda.h\\\"\"\necho \"  Link against: libRocketSim-CUDA.a\"\necho \"\"\necho \"Performance tips:\"\necho \"  - Use Release build for maximum performance\"\necho \"  - Ensure GPU is not throttling (check temperatures)\"\necho \"  - Use batch processing for RL training\"\necho \"  - Monitor GPU memory usage\"\n"
